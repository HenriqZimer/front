import { mount } from '@vue/test-utils';
import { describe, it, expect, vi } from 'vitest';
import AluguelForm from '@/components/Aluguel/AluguelForm.vue';
import { createVuetify } from 'vuetify';
import 'vuetify/styles';
import { aliases, mdi } from 'vuetify/iconsets/mdi';

const vuetify = createVuetify({
  icons: {
    defaultSet: 'mdi',
    aliases,
    sets: { mdi },
  },
});

vi.mock('axios', () => ({
  default: {
    get: vi.fn(() => Promise.resolve({ data: {} })),
    post: vi.fn(() => Promise.resolve({ data: {} })),
    put: vi.fn(() => Promise.resolve({ data: {} })),
  },
}));

describe('AluguelForm', () => {
  it('deve renderizar corretamente o formulário', () => {
    const wrapper = mount(AluguelForm, {
      global: {
        plugins: [vuetify],
      },
    });

    const title = wrapper.find('.v-card-title');
    expect(title.text()).toContain('Novo Aluguel');
  });

  it('deve exibir mensagens de erro ao tentar salvar com campos vazios', async () => {
    const wrapper = mount(AluguelForm, {
      global: {
        plugins: [vuetify],
      },
    });

    const saveButton = wrapper.find('button');
    await saveButton.trigger('click');

    const errorMessages = wrapper.findAll('.v-messages__message');
    expect(errorMessages.length).toBeGreaterThan(0);
  });

  it('deve chamar a API corretamente ao preencher e submeter o formulário', async () => {
    const mockApi = vi.fn(() => Promise.resolve({ data: {} }));

    const wrapper = mount(AluguelForm, {
      global: {
        plugins: [vuetify],
      },
    });

    const inputs = wrapper.findAll('input');
    await inputs[0].setValue('carro123');
    await inputs[1].setValue('usuario123');

    const saveButton = wrapper.find('button');
    await saveButton.trigger('click');

    expect(mockApi).toHaveBeenCalled();
  });
});
