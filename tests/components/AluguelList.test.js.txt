import { mount } from '@vue/test-utils';
import AluguelList from '../../src/components/Aluguel/AluguelList.vue';
import { createVuetify } from 'vuetify';
import * as components from 'vuetify/components';
import * as directives from 'vuetify/directives';

// Mock para ignorar arquivos CSS durante os testes
vi.mock('vuetify/styles', () => ({}));
vi.mock('@mdi/font/css/materialdesignicons.css', () => ({}));

// Configuração do Vuetify apenas para os testes
const vuetify = createVuetify({
  components,
  directives,
  icons: {
    defaultSet: 'mdi',
    aliases: {},
    sets: {},
  },
});

// Função para montar o componente com o Vuetify
const mountComponent = (data = {}) =>
  mount(AluguelList, {
    global: {
      plugins: [vuetify],
    },
    data() {
      return { ...data };
    },
  });

describe('AluguelList', () => {
  it('deve exibir a mensagem de lista vazia se não houver aluguéis', async () => {
    const wrapper = mountComponent({ alugueis: [] });

    await wrapper.vm.$nextTick();

    const emptyMessage = wrapper.find('.v-card-text');
    expect(emptyMessage.exists()).toBe(true);
    expect(emptyMessage.text()).toBe('Não há aluguéis cadastrados no momento.');
  });

  it('deve chamar o método de exclusão ao clicar no botão delete', async () => {
    const deleteMock = vi.fn();
    const alugueisMock = [
      {
        _id: '1',
        dataInicio: '2024-01-01',
        dataFim: '2024-01-10',
        valorTotal: 500,
        status: 'ativo',
      },
    ];

    const wrapper = mountComponent({ alugueis: alugueisMock });
    wrapper.vm.deleteAluguel = deleteMock;

    await wrapper.vm.$nextTick();

    const deleteButton = wrapper.find('[aria-label="delete"]');
    expect(deleteButton.exists()).toBe(true);

    await deleteButton.trigger('click');
    expect(deleteMock).toHaveBeenCalledWith('1');
  });

  it('deve navegar para a edição ao clicar no botão editar', async () => {
    const pushMock = vi.fn();
    const alugueisMock = [
      {
        _id: '1',
        dataInicio: '2024-01-01',
        dataFim: '2024-01-10',
        valorTotal: 500,
        status: 'ativo',
      },
    ];

    const wrapper = mountComponent({ alugueis: alugueisMock });
    wrapper.vm.$router = { push: pushMock };

    await wrapper.vm.$nextTick();

    const editButton = wrapper.find('[aria-label="edit"]');
    expect(editButton.exists()).toBe(true);

    await editButton.trigger('click');
    expect(pushMock).toHaveBeenCalledWith('/alugueis/1/editar');
  });
});
